# Generated by Django 5.1.7 on 2025-03-24 10:47

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('full_name', models.CharField(max_length=100, verbose_name='full name')),
                ('institution', models.CharField(max_length=255, verbose_name='institution')),
                ('country', models.CharField(max_length=100, verbose_name='country')),
                ('is_researcher', models.BooleanField(default=False, verbose_name='researcher status')),
                ('is_developer', models.BooleanField(default=False, verbose_name='developer status')),
                ('is_student', models.BooleanField(default=False, verbose_name='student status')),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('academic_status', models.CharField(blank=True, max_length=100, verbose_name='academic status')),
                ('research_domains', models.JSONField(blank=True, default=list, verbose_name='research domains')),
                ('arabic_nlp_specialties', models.JSONField(blank=True, default=list, verbose_name='Arabic NLP specialties')),
                ('biography', models.TextField(blank=True, verbose_name='biography')),
                ('research_interests', models.TextField(blank=True, verbose_name='research interests')),
                ('publications', models.JSONField(blank=True, default=list, verbose_name='publications')),
                ('projects', models.JSONField(blank=True, default=list, verbose_name='projects')),
                ('preferred_language', models.CharField(choices=[('ar', 'Arabic'), ('en', 'English'), ('fr', 'French')], default='ar', max_length=20, verbose_name='preferred language')),
                ('can_upload_corpus', models.BooleanField(default=False, verbose_name='can upload corpus')),
                ('can_annotate', models.BooleanField(default=False, verbose_name='can annotate')),
                ('can_access_restricted_content', models.BooleanField(default=False, verbose_name='can access restricted content')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='last login IP')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='last activity')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
    ]
